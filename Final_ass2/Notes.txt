######################################################
FÖLJADE ÄR SKAPAT I DEN VIRTUELLA MILJÖN: api-ldk3itRZ
######################################################



- jag startar pipenv 
och installerade sqlalchemy vid start. 


- Skapat filerna: 
______________
* CONNECT_BD.PY
- Här har jag vad jag tror är kontakten med databasen.. 
- den som ska contecta med API senare?? 
___________________
* MODELS_DB.PY
HÄR KODAS ENLIGT sqlalchemy PRINCIP 
- Koden här är alla tables och columns som behövs i databasen ( Eller de som jag vill komma åt med hjälp av API senare?? ) 
- De är skapde i klasser som API kan aknvända sig av ??? 
### MÅSTE VARA NOGA MED ATT DENNA STÄMMER ÖVERENS MED SCHEMAS_DB
________________
*SCHEMAS_DB.PY
HÄR KODAS ENLIGT pydentic PRINCIP 
- Här har jag skapat modeller som går att använda i andra filer( tex. av API ?? för att Hämta data ?? skapa data?? (Alltså att dessa modeller visar vad jag kan komma åt i varje modell? 
Tex:        # en info modell 
            class AgnetsBase(BaseModel): 
                id: int
                agents_id: int
                active_service: bool            # vad denna säger är kanske att vi, om vi kallar på klassen kan få info om id , agent_id och active_service ?? 
### MÅSTE VARA NOGA MED ATT DENNA STÄMMER ÖVERENS MED MODELS_DB

________________
CRUDE.PY
- In this file we will have reusable functions to interact with the data in the database.
- CRUD comes from: Create, Read, Update, and Delete.

________________                         
API.PY
- Här skapar vi alla routs som vi ska använda i thunderqlient och browsern. 
http://127.0.0.1:8000 

- 





______________________________________________________________________________________________________________________________________________________
SIDE NOTE:                                      SQLAlchemy style and Pydantic style
                                                Notice that SQLAlchemy models define attributes using =, and pass the type as a parameter to Column, like in:

                                                name = Column(String)
                                                while Pydantic models declare the types using :, the new type annotation syntax/type hints:

                                                name: str
                                                Have it in mind, so you don't get confused when using = and : with them.
______________________________________________________________________________________________________________________________________________________

_______________________________________________________________________________________________________________________________________________________
SIDE NOTE:  pydentic config. function förklaring.                                     
                                                class MyConfig: ####################################
                                                    max_anystr_length = 10
                                                    validate_assignment = True
                                                    error_msg_templates = {
                                                        'value_error.any_str.max_length': 'max_length:{limit_value}',
                                                    }
Koden ovan skapar en klass av pydentics config function som ger villkår på vad som får läggas till 
Som i exemplet dataclass
                                                @dataclass(config=MyConfig) ##################
                                                class User:
                                                    id: int
                                                    name: str = 'John Doe'
                                                    signup_ts: datetime = None
                                   



DAGBOK: 

15/02/2023 

- Jag jobbar på att få funcitonerna i CRUD.py att funka.
- så att det funkar i API.py också. 

update 
- jag har fått routs att funka den enkla vägen. 
.post(populate 
.post(populate2 
.get(Agents 
Dessa funkar utmärkt i både browsern och thunderqlient. 
- nästa steg är ju att jiddra med JSON, varför? 


*NU håller jag på att försöka på mina mer anvancerade routs att funka. 
De som byggdes genom:
- model.py - crud.py - api.py. 
Dessa vill inte riktigt prata med varandra och jag håller på att tweeka dem så det funkar att:

ta fram alla agenter i agnets tablen. 

ta fram alla agenter i Agent_info tablen. 

# DETTA ÄR ERROREN JAG FÅR NÄR JAG FÖRSÖKER KÖRA @app.get("/all_agents_id") i api filen. 

                INFO:     127.0.0.1:62862 - "GET /all_agents_id HTTP/1.1" 500 Internal Server Error
                ERROR:    Exception in ASGI application
                Traceback (most recent call last):
                File "C:\Users\Bananberg\.virtualenvs\api-ldk3itRZ\Lib\site-packages\uvicorn\protocols\http\h11_impl.py", line 407, in run_asgi
                    result = await app(  # type: ignore[func-returns-value]
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

                            [....]

                File "C:\Users\Bananberg\.virtualenvs\api-ldk3itRZ\Lib\site-packages\anyio\_backends\_asyncio.py", line 937, in run_sync_in_worker_thread
                    return await future
                        ^^^^^^^^^^^^
                File "C:\Users\Bananberg\.virtualenvs\api-ldk3itRZ\Lib\site-packages\anyio\_backends\_asyncio.py", line 867, in run
                    result = context.run(func, *args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^
                File "C:\Users\Bananberg\Desktop\Python_ass\Final_ass2\API\api.py", line 104, in read_agents
                    agents = crud.get_agents(db) # DETTA BLEV ETT FEL VID ANVÄNDING I BROWSER. missing one positional argument.
                            ^^^^^^^^^^^^^^^^^^^
                File "C:\Users\Bananberg\Desktop\Python_ass\Final_ass2\API\crud.py", line 14, in get_agents
                    return db.query(model_db.Agents)
                        ^^^^^^^^
                AttributeError: 'NoneType' object has no attribute 'query'
                File "C:\Users\Bananberg\Desktop\Python_ass\Final_ass2\API\crud.py", line 14, in get_agents
                    return db.query(model_db.Agents)
                        ^^^^^^^^
                AttributeError: 'NoneType' object has no attribute 'query'
                                ##########################################


Som jag förstår det ligger felet mellan crud filen och model_db filen. Vad vet jag inte än ... 


När jag inspekterar SCHEMAS_DB ser jag också att om jag ändra: class Agent_infoBase(BaseModel): till: class Agent_infoBase(Base): 
Vill den attajg importerar base modellen från CONNECT_BD... Vad kan det bero på? 













from sqlalchemy import insert

from model_db import Agents, Agent_info



query = insert(Agents).values( agents_id="007")
print(query)

conn = engine.connect()
result =conn.execute(query)
conn.commit()


